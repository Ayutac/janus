Getting Started

	This document describes a simple and fast way to get your first Janus based MultiAgent System up and running.

* Introduction

	Janus is developed using {{{http://maven.apache.org}Maven}} to manage all its official module.
	So we will discuss in this document how to create a simple janus application using Maven.
	
	The janus platform is actually implemented as set of {{{http://www.osgi.org}OSGi}} bundles.
	However it uses a different terminology to enforce the fact that when we develop a Janus application you
	are in fact developing a MultiAgent System (MAS) Application.
	
	Even more janus is an {{{holons.html}Holonic}} Organizational Platform. However, this concepts are 
	outside of the scope of this document.
	
	So lets get to business!
	 

* Creating your first Janus Application

	To create our application we will use the an archetype provided by the janus project. 
	For further details please refer to the {{{jansss}janus application archetype}}.
	
	To create your application run the following command :	 

+------------------------------------------+
$mvn 
+------------------------------------------+

	If you examine the created project, you will find the following structure:

+------------------------------------------+
tree output
+------------------------------------------+

	If fact the archetype has created a running MAS demo. ;). You can test the application using the command:

+------------------------------------------+
$mvn clean install janus:run -Pfelix
+------------------------------------------+

	The "module:run" goal in the command line requests the XX plugin to start an OSGi implementation with 
	the janus kernel and your application. We will detail how this is achieved in the following section.
	The parameter "-Pfelix" activates the felix profile. 
	This profile creates an application using the {{{http://felix.apache.org}Apache Felix}} OSGi implementation.
	If you want the module to create the {{{http://www.eclipse.org/equinox}Eclipse Equinox}} application, just use "-Pequinox".
	Of course you are not required to use profiles nor this plugin to run your Janus Application. It only provides 
	a simple way to run simple MAS Applications.
	Janus Applications are, as we mentioned, OSGi compliant so if you can use more complex structures, like eclipse 
	RCP.
	  
	The output should look like to something like the following :
	
+------------------------------------------+
app output 
+------------------------------------------+
	
	The application is a simple PingPong demo, where two holons exchange 5 messages simulating they send a ball.
	
	Lets now tackle the application itself.
	
	

* Understanding the application structure

** The pom.xml



	

* Creating a distributable zip for your application 

	If you want to obtain a zip that you can distribute simply run the following command:

+------------------------------------------+
$mvn clean install module:preparedist -Pfelix
+------------------------------------------+

	Once again if you prefer Equinox use "-Pequinox" instead of "-Pfelix".
	We will assume you use the felix profile.
	
	In the target directory (or your maven output directory if you changed it) 
	you will find a janus-demos-pingpong-0.1-SNAPSHOT-felix.zip.
	This file contains all your OSGi dependencies. In fact you will find <<ONLY>> your OSGi dependencies.
	If you have other "regular" jar dependencies, you can use the {{{http://felix.apache.org}maven-bundle-plugin}}
	to include you dependencies in you janus module OSGi bundle.
	
	Now you can unzip the zip and run you application using:

+------------------------------------------+
$java -jar bin/org.apache.felix.main-1.6.0.jar
+------------------------------------------+
	
	or

+------------------------------------------+
$java -jar org.eclipse.osgi-3.4.2.jar
+------------------------------------------+

	if you are using the equinox profile.
	
	Go ahead! Give it a try! Nice... right?

* Following Steps

	The first thing to do is to modify this simple running application to include more roles and holons.

	If you need GUI support look at the {{{gui.html}GUI Tutorial}}
